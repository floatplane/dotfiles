#!/usr/bin/ruby

# TODO
# use more git shell integration
# https://www.kernel.org/pub/software/scm/git/docs/git-sh-setup.html
# https://coderwall.com/p/bt93ia
# Make a gem for easy install?

SCRIPT_NAME = "git-merge-pull"
NETRC_KEY = "#{SCRIPT_NAME}.api.github.com"

def require_gem_or_prompt(gem_name)
  begin
    require gem_name
  rescue LoadError
    puts "#{gem_name.capitalize} gem not found. Run:\n\n  gem install --user-install #{gem_name}\n\n"
    exit -1
  end
end

require 'io/console'
require 'optparse'
require 'pp'

require_gem_or_prompt 'git'
require_gem_or_prompt 'netrc'
require_gem_or_prompt 'octokit'

options = {
  :remote => "origin",
  :no_prompt => false,
  :verbose => false
}

opts = OptionParser.new do |opts|
  opts.banner = "Usage: git merge-pull [options] [pull request number]"

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end

  opts.on("-r", "--remote", "Remote that PR will be merged into. Default: origin") do |remote|
    options[:remote] = remote
  end

  opts.on("-y", "--[no-]auto", "Answer 'y' to all prompts") do |no_prompt|
    options[:no_prompt] = no_prompt
  end

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
end
opts.parse!

options[:pull_number] = ARGV[0]
if not options[:pull_number]
  puts opts
  exit
end

# TODO
# - take a branch name instead of a PR number and figure that out

def run(cmd)
  puts cmd
  puts `#{cmd}`
  puts ''
  exit -1 if $? != 0
end

def test_github_credentials
  n = Netrc.read
  user, oauth_token = n[NETRC_KEY]
  client = Octokit::Client.new :access_token => oauth_token
  begin
    client.user
  rescue
    n.delete NETRC_KEY
    n.save
    return false
  end
  return true
end

def prompt_for_github_credentials(args = {})
  user = args[:user]
  pass = args[:pass]
  needs_otp = args[:needs_otp]
  headers = {}

  unless user
    print "Enter your github username: "
    user = STDIN.gets.chomp!
    print "Password: "
    pass = STDIN.noecho(&:gets).chomp!
    puts "\n"
  end

  if needs_otp
    print "Enter an OTP code: "
    otp = STDIN.gets.chomp!
    headers = { "X-GitHub-OTP" => "#{otp}" }
  end

  client = Octokit::Client.new :login => user, :password => pass
  begin
    authorizations = client.authorizations :headers => headers
    auth = authorizations.find { |x| x[:app][:name].match "^#{SCRIPT_NAME}" }
    unless auth
      auth = client.create_authorization(:scopes => ["user", "repo"], :note => SCRIPT_NAME, :headers => headers)
    end
  rescue Octokit::Unauthorized
    puts "Invalid username or password."
    return false
  rescue Octokit::OneTimePasswordRequired
    # Come back through this method, prompting for an OTP
    return prompt_for_github_credentials :user => user, :pass => pass, :needs_otp => true
  end

  n = Netrc.read
  n[NETRC_KEY] = user, auth[:token]
  n.save

  return true
end

if not test_github_credentials and not prompt_for_github_credentials
  exit -1
end

# Get local Git object pointed at our repo root
git = Git.open `git rev-parse --show-toplevel`.chomp!

# Find the target repository that we'll merge the pull request into
# TODO: could read off command line instead
target_remote = git.remotes.find { |x| x.name == options[:remote] }
url_match = target_remote.url.match "^git@github.com:(.*)/(.*).git"
organization = url_match[1]
repository = url_match[2]

n = Netrc.read
user, oauth_token = n[NETRC_KEY]
Octokit.configure do |c|
  c.access_token = oauth_token
end

github_repo = Octokit.repo "#{organization}/#{repository}"
# pp github_repo

pulls = Octokit.pulls "#{organization}/#{repository}/pulls"
pulls.each do |pull|
  puts "#{pull[:number]} #{pull[:user][:login]} #{pull[:title]}"
end

# pp pulls.first

# TODO: select the correct pull request #
pull = pulls.find { |p| p[:number] == options[:pull_number].to_i }
unless pull
  puts "Invalid pull request #{options[:pull_number]}"
end

pull_number = pull[:number]
source_branch = pull[:head][:ref]
source_repo_ssh_url = pull[:head][:repo][:git_url]
source_repo_clone_url = pull[:head][:repo][:clone_url]

target_branch = pull[:base][:ref]
target_repo_ssh_url = pull[:base][:repo][:git_url]
target_repo_clone_url = pull[:base][:repo][:clone_url]

puts "#{target_repo_ssh_url}/#{target_branch} <= #{source_repo_ssh_url}/#{source_branch}"

# find or add a remote for the PR
# pp git.remotes.last
source_remote = git.remotes.find { |x| [pull[:head][:repo][:git_url],
                                        pull[:head][:repo][:ssh_url]].include? x.url }
unless source_remote
  puts "Cloning remote #{pull[:user][:login]} from #{pull[:head][:repo][:ssh_url]}"
  source_remote = git.add_remote pull[:user][:login], pull[:head][:repo][:ssh_url]
end

# Fetch latest changes from source & target remotes. Useful in case one of source or target
# branches doesn't exist locally yet, or if we've never pulled from one of the remotes.
puts "Fetching latest changes from #{source_remote}"
source_remote.fetch
puts "Fetching latest changes from #{target_remote}"
target_remote.fetch

# Get the target branch up to date
run "git checkout #{target_branch}"
run "git pull"

# Get the source branch up to date
run "git checkout #{source_branch}"
run "git pull"

# Rebase the source branch on top of the target branch, and then force push it
run "git rebase #{target_branch}"
run "git push -f #{source_remote.name}"

# Merge the source branch into the target. Use --no-ff so that an explicit merge commit is created.
run "git checkout #{target_branch}"
run "git merge --no-ff #{source_remote.name}/#{source_branch} -m 'PR ##{pull[:number]}. Merge branch #{source_remote.name}/#{source_branch} into #{target_branch}.'"

# Print a log of the merge with branch structure visible. Jump through hoops to
# get the right branch to start the log revision range with. If origin/develop
# is a merge commit, we need the right parent of the merge.
#
# The goal is to get output like this:
#
# *   5be2a77 (HEAD, develop) PR #1269. Merge branch floatplane/feature/categories into develop.
# |\
# | * 2242141 (floatplane/feature/categories, feature/categories) Process CR feedback. Remove StaticCreatorListDataSource, will just rework Streamed* version to meet needs instead.
# | * d7cf231 Implement StaticCreatorListDataSource for categories, rename CreatorListDataSource => StreamedCreatorListDataSource
# | * ef034d0 Don't animate profile pic transitions when we're re-using a cell and needing to replace someone else's picture. Only animate from the blank thumbnail to an actual picture.
# | * 25cda8b Refactor CreatorListViewController.
# | * 682b7ba Adjust search dialog size and default position. Remove temp close button. Stub categories into search dialog.
# | * e8ba0b1 Rename CollaboratorsListViewController => CreatorListViewController. Add CollaboratorListViewController as a subclass of CreatorListViewController, will refactor behavior into it in future commits.
# | * e901256 Make dismissWithBackgroundTouch work for all CustomModalDialogs, even those that don't set useCustomPopover. Fix latent bug in ApplicationInfoNavigationController's implementation of the same.
# |/
# * 8d5ecbc (origin/develop, origin/HEAD) Merge branch 'feature/schemaUpgradeUtils' into develop
#
# where the log stops at origin/develop, no matter whether it's a merge commit or not.
#
origin_parent = `git rev-list --abbrev-commit --parents -n 1 origin/#{target_branch}`.split().last
run "git log --graph --decorate --pretty=oneline --abbrev-commit --color #{target_branch} #{origin_parent}..#{target_branch}"

def get_char
  state = `stty -g`
  `stty raw -echo -icanon isig`

  STDIN.getc.chr
ensure
  `stty #{state}`
  puts ""
end

print "Do you want to proceed with the merge (y/n)? "
if get_char.downcase == 'y'
  puts "Pushing changes to #{target_remote}"
  run "echo git push"
  print "Do you want to delete the feature branches (y/n)? "
  if get_char.downcase == 'y'
    run "echo git push #{target_remote} :#{target_branch}"
    run "echo git branch -d #{target_branch}"
  end
  puts "Merge complete!"
else
  puts "Undoing local merge"
  run "echo git reset --hard origin/#{target_branch}"
end
